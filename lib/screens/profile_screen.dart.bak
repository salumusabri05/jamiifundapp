import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:jamiifund/services/user_service.dart';
import 'package:jamiifund/services/verification_service.dart';
import 'package:jamiifund/services/supabase_client.dart';
import 'package:jamiifund/widgets/app_bottom_nav_bar.dart';
import 'package:jamiifund/widgets/verification_status_widget.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'dart:ui';

class ProfileScreen extends StatefulWidget {
  const ProfileScreen({super.key});

  @override
  State<ProfileScreen> createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> with SingleTickerProviderStateMixin {
  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _usernameController = TextEditingController();
  final _phoneController = TextEditingController();
  final _websiteController = TextEditingController();
  final _addressController = TextEditingController();
  final _cityController = TextEditingController();
  final _regionController = TextEditingController();
  final _postalCodeController = TextEditingController();
  final _bioController = TextEditingController();
  final _locationController = TextEditingController();
  final _organizationNameController = TextEditingController();
  final _organizationRegNumberController = TextEditingController();
  final _organizationTypeController = TextEditingController();
  final _organizationDescriptionController = TextEditingController();
  
  final _formKey = GlobalKey<FormState>();
  
  bool _isLoading = false;
  bool _isEditMode = false;
  bool _isOrganization = false;
  bool _isVerified = false;
  String? _avatarUrl;
  bool _isDarkMode = false;
  
  // Animation controllers
  TabController? _tabController; // Change to nullable
  final ScrollController _scrollController = ScrollController();
  bool _isScrolled = false;
  
  // User stats
  int _campaignsStarted = 0;
  int _campaignsContributed = 0;
  double _totalAmountRaised = 0;
  
  // Expanded sections
  bool _personalExpanded = true;
  bool _contactExpanded = false;
  bool _addressExpanded = false;
  bool _organizationExpanded = false;

  @override
  void initState() {
    super.initState();
    // Initialize TabController first to avoid LateInitializationError
    _tabController = TabController(length: 3, vsync: this);
    _loadUserData();
    _loadUserStats();
    
    // Add listener for scroll controller to create collapsing app bar effect
    _scrollController.addListener(() {
      setState(() {
        _isScrolled = _scrollController.offset > 50;
      });
    });
    
    // Add listener to the tab controller to handle tab changes
    _tabController?.addListener(() {
      if (_tabController != null && !_tabController!.indexIsChanging) {
        setState(() {
          // Update tab expanded states based on selected tab
          _personalExpanded = _tabController!.index == 0;
          _contactExpanded = _tabController!.index == 1;
          _organizationExpanded = _tabController!.index == 2;
        });
      }
    });
  }
  
  // Load user statistics (this would ideally come from a service)
  Future<void> _loadUserStats() async {
    // For demonstration purposes using mock data
    // In a real app, this would come from a backend service
    setState(() {
      _campaignsStarted = 3;
      _campaignsContributed = 7;
      _totalAmountRaised = 12500.0;
    });
  }

  // Load user data
  Future<void> _loadUserData() async {
    setState(() => _isLoading = true);
    
    try {
      final userProfile = await UserService.getCurrentUserProfile();
      
      // Check verification status directly from the verification service
      final user = UserService.getCurrentUser();
      bool verificationStatus = false;
      if (user != null) {
        try {
          // Import the verification service at the top of the file if not already imported
          verificationStatus = await VerificationService.isUserVerified(user.id);
        } catch (e) {
          // Fallback to profile data if service check fails
          verificationStatus = userProfile?.isVerified ?? false;
        }
      }
      
      if (userProfile != null) {
        setState(() {
          _nameController.text = userProfile.fullName;
          _emailController.text = userProfile.email ?? '';
          _usernameController.text = userProfile.username ?? '';
          _phoneController.text = userProfile.phone ?? '';
          _websiteController.text = userProfile.website ?? '';
          _addressController.text = userProfile.address ?? '';
          _cityController.text = userProfile.city ?? '';
          _regionController.text = userProfile.region ?? '';
          _postalCodeController.text = userProfile.postalCode ?? '';
          _bioController.text = userProfile.bio ?? '';
          _locationController.text = userProfile.location ?? '';
          _organizationNameController.text = userProfile.organizationName ?? '';
          _organizationRegNumberController.text = userProfile.organizationRegNumber ?? '';
          _organizationTypeController.text = userProfile.organizationType ?? '';
          _organizationDescriptionController.text = userProfile.organizationDescription ?? '';
          _isOrganization = userProfile.isOrganization ?? false;
          _isVerified = verificationStatus;
          _avatarUrl = userProfile.avatarUrl;
          
          // Reset expanded sections status based on data availability
          _personalExpanded = true;
          _contactExpanded = _phoneController.text.isNotEmpty || _websiteController.text.isNotEmpty;
          _addressExpanded = _addressController.text.isNotEmpty || _cityController.text.isNotEmpty;
          _organizationExpanded = _organizationNameController.text.isNotEmpty;
        });
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error loading user data: ${e.toString()}')),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // Update user profile
  Future<void> _updateProfile() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    setState(() => _isLoading = true);
    
    try {
      final userId = SupabaseService.client.auth.currentUser!.id;
      await UserService.updateUserProfile(
        userId: userId,
        fullName: _nameController.text,
        username: _usernameController.text,
        phone: _phoneController.text,
        website: _websiteController.text,
        address: _addressController.text,
        city: _cityController.text,
        region: _regionController.text,
        postalCode: _postalCodeController.text,
        bio: _bioController.text,
        location: _locationController.text,
        isOrganization: _isOrganization,
        organizationName: _isOrganization ? _organizationNameController.text : null,
        organizationRegNumber: _isOrganization ? _organizationRegNumberController.text : null,
        organizationType: _isOrganization ? _organizationTypeController.text : null,
        organizationDescription: _isOrganization ? _organizationDescriptionController.text : null,
      );
      
      setState(() => _isEditMode = false);
      
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Profile updated successfully!')),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error updating profile: ${e.toString()}')),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // Sign out
  Future<void> _signOut() async {
    setState(() => _isLoading = true);
    
    try {
      await UserService.signOut();
      // Navigate to auth page after signing out
      if (!mounted) return;
      
      Navigator.of(context).pushNamedAndRemoveUntil('/auth', (route) => false);
      
    } catch (e) {
      if (!mounted) return;
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error signing out: ${e.toString()}')),
      );
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final primaryColor = theme.colorScheme.primary;
    
    // Ensure TabController is initialized
    if (_tabController == null) {
      _tabController = TabController(length: 3, vsync: this);
    }
    
    return Scaffold(
      body: _isLoading
          ? Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const CircularProgressIndicator(),
                  const SizedBox(height: 16),
                  Text(
                    'Loading your profile...',
                    style: GoogleFonts.poppins(fontWeight: FontWeight.w500),
                  ),
                ],
              ),
            )
          : CustomScrollView(
              controller: _scrollController,
              physics: const BouncingScrollPhysics(),
              slivers: [
                // Animated App Bar
                SliverAppBar(
                  expandedHeight: 200,
                  floating: false,
                  pinned: true,
                  automaticallyImplyLeading: false,
                  backgroundColor: _isDarkMode ? Colors.black87 : primaryColor,
                  flexibleSpace: LayoutBuilder(
                    builder: (BuildContext context, BoxConstraints constraints) {
                      final top = constraints.biggest.height;
                      final isCollapsed = top < kToolbarHeight + 30;
                      
                      return FlexibleSpaceBar(
                        centerTitle: isCollapsed,
                        title: AnimatedOpacity(
                          duration: const Duration(milliseconds: 300),
                          opacity: isCollapsed ? 1.0 : 0.0,
                          child: Text(
                            'My Profile',
                            style: GoogleFonts.poppins(
                              fontWeight: FontWeight.w600,
                              color: Colors.white,
                            ),
                          ),
                        ),
                        background: Stack(
                          fit: StackFit.expand,
                          children: [
                            // Background gradient
                            Container(
                              decoration: BoxDecoration(
                                gradient: LinearGradient(
                                  colors: _isDarkMode 
                                      ? [Colors.blueGrey.shade900, Colors.black87]
                                      : [primaryColor.withOpacity(0.8), primaryColor],
                                  begin: Alignment.topLeft,
                                  end: Alignment.bottomRight,
                                ),
                              ),
                            ),
                            
                            // Abstract pattern
                            Opacity(
                              opacity: 0.1,
                              child: Image.asset(
                                'assets/images/hero.jpeg',
                                fit: BoxFit.cover,
                              ),
                            ),
                            
                            // Darken overlay
                            Container(
                              decoration: BoxDecoration(
                                gradient: LinearGradient(
                                  colors: [
                                    Colors.transparent,
                                    Colors.black.withOpacity(0.5),
                                  ],
                                  begin: Alignment.topCenter,
                                  end: Alignment.bottomCenter,
                                ),
                              ),
                            ),
                            
                            // User info overlay
                            Positioned(
                              bottom: 60,
                              left: 16,
                              child: Row(
                                children: [
                                  Hero(
                                    tag: 'profileAvatar',
                                    child: Material(
                                      elevation: 8,
                                      shadowColor: Colors.black38,
                                      shape: const CircleBorder(),
                                      clipBehavior: Clip.antiAlias,
                                      color: Colors.transparent,
                                      child: _avatarUrl != null && _avatarUrl!.isNotEmpty
                                          ? CircleAvatar(
                                              radius: 30,
                                              backgroundImage: NetworkImage(_avatarUrl!),
                                            )
                                          : CircleAvatar(
                                              radius: 30,
                                              backgroundColor: Colors.grey[300],
                                              child: const Icon(Icons.person, size: 30, color: Colors.white70),
                                            ),
                                    ),
                                  ),
                                  const SizedBox(width: 12),
                                  Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        _nameController.text.isNotEmpty ? _nameController.text : 'User',
                                        style: GoogleFonts.poppins(
                                          fontSize: 18,
                                          fontWeight: FontWeight.w600,
                                          color: Colors.white,
                                        ),
                                      ),
                                      Text(
                                        _usernameController.text.isNotEmpty
                                            ? '@${_usernameController.text}'
                                            : _emailController.text,
                                        style: GoogleFonts.poppins(
                                          fontSize: 14,
                                          color: Colors.white70,
                                        ),
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      );
                    },
                  ),
                  actions: [
                    // Theme toggle
                    IconButton(
                      icon: Icon(
                        _isDarkMode ? Icons.light_mode : Icons.dark_mode,
                        color: Colors.white,
                      ),
                      onPressed: _toggleTheme,
                    ),
                    
                    // Edit mode toggle
                    if (!_isLoading && !_isEditMode)
                      IconButton(
                        icon: const Icon(Icons.edit, color: Colors.white),
                        onPressed: () {
                          setState(() => _isEditMode = true);
                        },
                      ),
                  ],
                ),
                
                // Content
                SliverToBoxAdapter(
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const SizedBox(height: 16),
                        
                        // Stats Cards
                        _buildStatsSection(),
                            
                        const SizedBox(height: 20),
                        
                        // Verification status card - only shown if user is not verified
                        if (!_isVerified) ... [
                          const VerificationStatusWidget(),
                          const SizedBox(height: 20),
                        ],
                        
                        // Tabs
                        _buildTabSection(primaryColor),
                        
                        const SizedBox(height: 32),
                        
                        // Sign out button
                        SizedBox(
                          width: double.infinity,
                          child: OutlinedButton.icon(
                            onPressed: _signOut,
                            icon: const FaIcon(FontAwesomeIcons.rightFromBracket),
                            label: Text(
                              'Sign Out',
                              style: GoogleFonts.poppins(
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                            style: OutlinedButton.styleFrom(
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                              padding: const EdgeInsets.symmetric(vertical: 16),
                              side: BorderSide(color: Colors.red.shade300),
                              foregroundColor: Colors.red.shade400,
                            ),
                          ),
                        ),
                        
                        const SizedBox(height: 40),
                      ],
                    ),
                  ),
                ),
              ],
            ),
      bottomNavigationBar: const AppBottomNavBar(currentIndex: 4), // Updated to 4 for profile tab
    );
  }
  
  // Stats section with animated cards
  Widget _buildStatsSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            FaIcon(FontAwesomeIcons.chartLine, size: 16, color: Colors.grey[600]),
            const SizedBox(width: 8),
            Text(
              'Your Activity',
              style: GoogleFonts.poppins(
                fontSize: 18,
                fontWeight: FontWeight.w600,
              ),
            ),
          ],
        ),
        const SizedBox(height: 12),
        
        _buildStatCard(
          'Campaigns Started',
          _campaignsStarted.toString(),
          Icons.campaign,
          Colors.blue.shade700,
        ),
        const SizedBox(height: 12),
        _buildStatCard(
          'Campaigns Supported',
          _campaignsContributed.toString(),
          Icons.volunteer_activism,
          Colors.green.shade700,
        ),
        const SizedBox(height: 12),
        _buildStatCard(
          'Total Amount Raised',
          '\$${_totalAmountRaised.toStringAsFixed(2)}',
          Icons.attach_money,
          Colors.amber.shade700,
        ),
      ],
    );
  }
  
  // Individual stat card with simplified design
  Widget _buildStatCard(
    String title, 
    String value, 
    IconData icon, 
    Color color
  ) {
    return Container(
      width: double.infinity,
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 16),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(16),
          color: color.withOpacity(0.1),
          border: Border.all(color: color.withOpacity(0.3), width: 1),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.05),
              blurRadius: 10,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(10),
              decoration: BoxDecoration(
                color: color.withOpacity(0.2),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Icon(icon, color: color, size: 24),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: GoogleFonts.poppins(
                      fontSize: 12,
                      fontWeight: FontWeight.w500,
                      color: Colors.grey[600],
                    ),
                  ),
                  const SizedBox(height: 2),
                  Text(
                    value,
                    style: GoogleFonts.poppins(
                      fontSize: 18,
                      fontWeight: FontWeight.w600,
                      color: color,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  // Tab section with profile information
  Widget _buildTabSection(Color primaryColor) {
    return Column(
      children: [
        // Tab bar
        Container(
          decoration: BoxDecoration(
            color: Colors.grey.withOpacity(0.1),
            borderRadius: BorderRadius.circular(12),
          ),
          child: TabBar(
            controller: _tabController,
            labelColor: primaryColor,
            unselectedLabelColor: Colors.grey,
            indicatorColor: primaryColor,
            indicatorSize: TabBarIndicatorSize.tab,
            labelStyle: GoogleFonts.poppins(fontWeight: FontWeight.w600),
            unselectedLabelStyle: GoogleFonts.poppins(fontWeight: FontWeight.w400),
            dividerHeight: 0,
            tabs: const [
              Tab(text: 'Personal'),
              Tab(text: 'Contact'),
              Tab(text: 'Organization'),
            ],
          ),
        ),
        
        // Tab content with larger height
        SizedBox(
          height: 420, // Adjust based on content
          child: _tabController == null 
              ? Center(child: CircularProgressIndicator())
              : TabBarView(
            controller: _tabController,
            physics: const BouncingScrollPhysics(),
            children: [
              // Personal Info Tab
              _buildPersonalInfoTab(),
              
              // Contact Info Tab
              _buildContactInfoTab(),
              
              // Organization Info Tab
              _buildOrganizationInfoTab(),
            ],
          ),
        ),
        
        // Action buttons in edit mode
        if (_isEditMode)
          Padding(
            padding: const EdgeInsets.only(top: 16),
            child: Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _updateProfile,
                    icon: const Icon(Icons.save),
                    label: Text(
                      'Save Changes',
                      style: GoogleFonts.poppins(
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    style: ElevatedButton.styleFrom(
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      padding: const EdgeInsets.symmetric(vertical: 16),
                    ),
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: OutlinedButton.icon(
                    onPressed: () {
                      setState(() => _isEditMode = false);
                      _loadUserData(); // Reload user data to reset form
                    },
                    icon: const Icon(Icons.cancel),
                    label: Text(
                      'Cancel',
                      style: GoogleFonts.poppins(
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    style: OutlinedButton.styleFrom(
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      padding: const EdgeInsets.symmetric(vertical: 16),
                    ),
                  ),
                ),
              ],
            ),
          ),
      ],
    );
  }
  
  // Personal Info Tab
  Widget _buildPersonalInfoTab() {
    return SingleChildScrollView(
      physics: const BouncingScrollPhysics(),
      child: Padding(
        padding: const EdgeInsets.only(top: 20),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              _buildAnimatedField(
                controller: _nameController,
                label: 'Full Name',
                prefixIcon: Icons.person,
                enabled: _isEditMode,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter your name';
                  }
                  return null;
                },
              ),
              
              _buildAnimatedField(
                controller: _usernameController,
                label: 'Username',
                prefixIcon: Icons.alternate_email,
                prefixText: '@',
                enabled: _isEditMode,
              ),
              
              _buildAnimatedField(
                controller: _bioController,
                label: 'Bio',
                prefixIcon: Icons.info,
                enabled: _isEditMode,
                maxLines: 3,
              ),
              
              _buildAnimatedField(
                controller: _locationController,
                label: 'Location',
                prefixIcon: Icons.location_on,
                enabled: _isEditMode,
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  // Contact Info Tab
  Widget _buildContactInfoTab() {
    return SingleChildScrollView(
      physics: const BouncingScrollPhysics(),
      child: Padding(
        padding: const EdgeInsets.only(top: 20),
        child: Column(
          children: [
            _buildAnimatedField(
              controller: _emailController,
              label: 'Email Address',
              prefixIcon: Icons.email,
              enabled: false, // Email can't be changed
              delay: 0.ms,
            ),
            
            _buildAnimatedField(
              controller: _phoneController,
              label: 'Phone Number',
              prefixIcon: Icons.phone,
              enabled: _isEditMode,
              delay: 100.ms,
            ),
            
            _buildAnimatedField(
              controller: _websiteController,
              label: 'Website',
              prefixIcon: Icons.link,
              enabled: _isEditMode,
              delay: 200.ms,
            ),
            
            ExpansionTile(
              title: Text(
                'Address Information',
                style: GoogleFonts.poppins(fontWeight: FontWeight.w500),
              ),
              leading: const Icon(Icons.home),
              childrenPadding: const EdgeInsets.symmetric(horizontal: 16),
              initiallyExpanded: false,
              children: [
                _buildAnimatedField(
                  controller: _addressController,
                  label: 'Street Address',
                  enabled: _isEditMode,
                  delay: 0.ms,
                ),
                
                _buildAnimatedField(
                  controller: _cityController,
                  label: 'City',
                  enabled: _isEditMode,
                  delay: 50.ms,
                ),
                
                _buildAnimatedField(
                  controller: _regionController,
                  label: 'Region/State',
                  enabled: _isEditMode,
                  delay: 100.ms,
                ),
                
                _buildAnimatedField(
                  controller: _postalCodeController,
                  label: 'Postal Code',
                  enabled: _isEditMode,
                  delay: 150.ms,
                ),
                
                const SizedBox(height: 8),
              ],
            ),
          ],
        ),
      ),
    );
  }
  
  // Organization Info Tab
  Widget _buildOrganizationInfoTab() {
    return SingleChildScrollView(
      physics: const BouncingScrollPhysics(),
      child: Padding(
        padding: const EdgeInsets.only(top: 20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Organization toggle
            Card(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              elevation: 1,
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Row(
                  children: [
                    const Icon(Icons.business, size: 24),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Organization Profile',
                            style: GoogleFonts.poppins(
                              fontWeight: FontWeight.w600,
                              fontSize: 16,
                            ),
                          ),
                          Text(
                            'Enable to add organization details',
                            style: GoogleFonts.poppins(
                              fontSize: 14,
                              color: Colors.grey[600],
                            ),
                          ),
                        ],
                      ),
                    ),
                    if (_isEditMode)
                      Switch(
                        value: _isOrganization,
                        onChanged: (value) {
                          setState(() {
                            _isOrganization = value;
                          });
                        },
                      ),
                  ],
                ),
              ),
            ),
            
            const SizedBox(height: 16),
            
            // Organization fields
            if (_isOrganization || (!_isEditMode && _organizationNameController.text.isNotEmpty)) ...[
              _buildAnimatedField(
                controller: _organizationNameController,
                label: 'Organization Name',
                prefixIcon: Icons.business_center,
                enabled: _isEditMode,
                validator: (value) {
                  if (_isOrganization && (value == null || value.isEmpty)) {
                    return 'Please enter organization name';
                  }
                  return null;
                },
                delay: 100.ms,
              ),
              
              _buildAnimatedField(
                controller: _organizationRegNumberController,
                label: 'Registration Number',
                prefixIcon: Icons.numbers,
                enabled: _isEditMode,
                delay: 200.ms,
              ),
              
              _buildAnimatedField(
                controller: _organizationTypeController,
                label: 'Organization Type',
                prefixIcon: Icons.category,
                enabled: _isEditMode,
                delay: 300.ms,
              ),
              
              _buildAnimatedField(
                controller: _organizationDescriptionController,
                label: 'Organization Description',
                prefixIcon: Icons.description,
                enabled: _isEditMode,
                maxLines: 3,
                delay: 400.ms,
              ),
            ],
            
            if (!_isOrganization && _isEditMode)
              Center(
                child: Padding(
                  padding: const EdgeInsets.symmetric(vertical: 32),
                  child: Column(
                    children: [
                      Icon(
                        Icons.business_center,
                        size: 64,
                        color: Colors.grey[400],
                      ),
                      const SizedBox(height: 16),
                      Text(
                        'Organization profile disabled',
                        style: GoogleFonts.poppins(
                          fontSize: 16,
                          color: Colors.grey[600],
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'Toggle the switch above to add organization details',
                        textAlign: TextAlign.center,
                        style: GoogleFonts.poppins(
                          fontSize: 14,
                          color: Colors.grey[500],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }
  
  // Animated form field
  Widget _buildAnimatedField({
    required TextEditingController controller,
    required String label,
    IconData? prefixIcon,
    String? prefixText,
    bool enabled = true,
    int maxLines = 1,
    String? Function(String?)? validator,
    // Remove delay parameter as we no longer need animations
  }) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: TextFormField(
        controller: controller,
        decoration: InputDecoration(
          labelText: label,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          prefixIcon: prefixIcon != null ? Icon(prefixIcon) : null,
          prefixText: prefixText,
          filled: true,
          fillColor: enabled ? Colors.transparent : Colors.grey.withOpacity(0.1),
          contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
        ),
        enabled: enabled,
        maxLines: maxLines,
        validator: validator,
      ),
    );
  }
  
  void _toggleTheme() {
    setState(() {
      _isDarkMode = !_isDarkMode;
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(_isDarkMode ? 'Dark mode enabled' : 'Light mode enabled'),
        duration: const Duration(seconds: 1),
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  @override
  void dispose() {
    _nameController.dispose();
    _emailController.dispose();
    _usernameController.dispose();
    _phoneController.dispose();
    _websiteController.dispose();
    _addressController.dispose();
    _cityController.dispose();
    _regionController.dispose();
    _postalCodeController.dispose();
    _bioController.dispose();
    _locationController.dispose();
    _organizationNameController.dispose();
    _organizationRegNumberController.dispose();
    _organizationTypeController.dispose();
    _organizationDescriptionController.dispose();
    _tabController?.dispose();
    _scrollController.dispose();
    super.dispose();
  }
}
